version: 2.1

parameters:
  docker_version:
    type: string
    default: "19.03.13"
  db_user:
    type: string
    default: "postgres"
  db_password:
    type: string
    default: "somesecret"
  db_name:
    type: string
    default: "psga_db"

executors:
  python:
    docker:
      - image: cimg/python:3.9
  python_with_db:
    docker:
      - image: cimg/python:3.9
        environment:
          PGHOST: localhost
          PGUSER: << pipeline.parameters.db_user >>
          DB_HOST: localhost
          DB_USER: << pipeline.parameters.db_user >>
          DB_PASSWORD: << pipeline.parameters.db_password >>
          DB_NAME: << pipeline.parameters.db_name >>
      - image: cimg/postgres:11.13
        environment:
          POSTGRES_USER: << pipeline.parameters.db_user >>
          POSTGRES_PASSWORD: << pipeline.parameters.db_password >>
          POSTGRES_HOST_AUTH_METHOD: password

commands:
  build_and_push_docker_image:
    parameters:
      dockerfile:
        type: string
      ecrpath:
        type: string
      gitsubmodules:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          version: << pipeline.parameters.docker_version >>
          docker_layer_caching: true
      - checkout
      - when:
          condition: << parameters.gitsubmodules >>
          steps:
            - run:
                name: Install git submodules
                command: |
                  git submodule init
                  git submodule update
      - run:
          name: Build docker image
          command: |
            pip install --progress-bar off awscli
            eval $(aws ecr get-login --no-include-email --region eu-west-1)
            NORMALISED_SLASHES=${CIRCLE_BRANCH//\//_}
            DOCKER_TAG_BRANCH=${NORMALISED_SLASHES//-/_}
            DOCKER_TAG="${DOCKER_TAG_BRANCH}_${CIRCLE_BUILD_NUM}"
            REGISTRY_URI="${ECREPOURI}<<parameters.ecrpath>>"
            FULL_TAG="${REGISTRY_URI}:${DOCKER_TAG}"
            LATEST_IMAGE_TAG="${REGISTRY_URI}:${DOCKER_TAG_BRANCH}_latest"
            CIRCLE_TAG="${REGISTRY_URI}:circleci_${CIRCLE_BUILD_NUM}"
            docker build -t ${FULL_TAG} -t ${CIRCLE_TAG} -t ${LATEST_IMAGE_TAG} -f docker/<< parameters.dockerfile >> .
            docker push ${FULL_TAG}
            docker push ${CIRCLE_TAG}
            docker push ${LATEST_IMAGE_TAG}
            # Log out the environment vars
            echo "CircleCI url to access"
            echo "${FULL_TAG}"

jobs:
  pre_commit_hooks:
    executor: python
    steps:
      - checkout
      - run:
          name: Run pre-commit checks
          command: |
            pip install pre-commit==2.17.0
            pre-commit run --all-files

  test-psga:
    executor: python_with_db
    steps:
      - checkout
      - run:
          name: Install sqitch and create database
          command: |
            sudo apt-get update
            sudo apt-get install -qq sqitch postgresql-client
            createdb psga_db
            cd sqitch
            sqitch deploy
            sqitch verify
      - run:
          name: Install dependencies and run tests
          command: |
            poetry install
            poetry run pytest tests/
  build-psga:
    executor: python
    steps:
      - build_and_push_docker_image:
          dockerfile: "Dockerfile.psga"
          ecrpath: ${PSGA_ECREPOPATH}
          gitsubmodules: false
  build-ncov2019-artic-nf-illumina:
    executor: python
    steps:
      - build_and_push_docker_image:
          dockerfile: "Dockerfile.ncov2019-artic-nf-illumina"
          ecrpath: ${NCOV2019_ARTIC_NF_ILLUMINA_ECREPOPATH}
          gitsubmodules: true
  build-ncov2019-artic-nf-nanopore:
    executor: python
    steps:
      - build_and_push_docker_image:
          dockerfile: "Dockerfile.ncov2019-artic-nf-nanopore"
          ecrpath: ${NCOV2019_ARTIC_NF_NANOPORE_ECREPOPATH}
          gitsubmodules: true
  build-pangolin:
    executor: python
    steps:
      - build_and_push_docker_image:
          dockerfile: "Dockerfile.pangolin"
          ecrpath: ${PANGOLIN_ECREPOPATH}
          gitsubmodules: true

workflows:
  version: 2
  test_and_build_all:
    jobs:
    - pre_commit_hooks
    - test-psga:
        requires:
          - pre_commit_hooks
        context: AWS_ECR_CREDENTIALS
    - build-psga:
        requires:
          - test-psga
        context: AWS_ECR_CREDENTIALS
    - build-ncov2019-artic-nf-illumina:
        requires:
          - test-psga
        context: AWS_ECR_CREDENTIALS
    - build-ncov2019-artic-nf-nanopore:
        requires:
          - test-psga
        context: AWS_ECR_CREDENTIALS
    - build-pangolin:
        requires:
          - test-psga
        context: AWS_ECR_CREDENTIALS
