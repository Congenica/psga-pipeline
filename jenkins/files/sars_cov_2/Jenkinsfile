/*
Constructs the Docker tag to use for this build from the branch it was kicked off from. It is hardcoded to take the
"_latest" image from this branch as we always want to run the most recent version of this image in Jenkins. By
constructing it here, it allows the build to find the Docker image from the branch that is kicked off in Jenkins without
having to pass it in as a parameter to the build.
This is done as a function outside of the pipeline {} declaration as Jenkins cannot read custom environment variables
before the Kubernetes pod has started up.
*/
def getDockerTagFromBranch() {
    return "${env.BRANCH_NAME.replace("/","_").replace("-","_")}_latest"
}

/*
Constructs build summary messages intended to be posted in Slack
*/
def buildSlackMessage() {
    return """
pathogen:               sars_cov_2
branch:                 ${env.BRANCH_NAME}
namespace:              ${params.NAMESPACE}
workdir:                ${params.NXF_WORK}
metadata:               ${params.METADATA}
run:                    ${params.ANALYSIS_RUN}
sequencing_technology:  ${params.SEQUENCING_TECHNOLOGY}
kit:                    ${params.KIT}
output_path:            ${params.OUTPUT_PATH}
started by:             ${getTriggerDescription()}
"""
}

/*
Get the description of how a build was triggered.
*/
def getTriggerDescription() {
    def trigger = currentBuild.getBuildCauses()[0].shortDescription
    return trigger.contains('user') ? trigger.replace('Started by user ', '') : 'Automated trigger'
}

/*
The Slack channel that messages are sent to are dependent on the branch being built:
    - For dev builds, these are posted to a separate channel (to reduce the noise and make seeing results much clearer)
    - For all other builds, they are grouped together in a single channel to avoid polluting the dev channel
*/
def getSlackChannel() {
    return env.BRANCH_NAME == 'dev' ? '#psga-pipeline-ci-dev' : '#psga-pipeline-ci'
}


pipeline {

    parameters {
        booleanParam(name: 'VALIDATION_TEST', defaultValue: true, description: 'If true, run script for validating the results')
        string(name: 'METADATA', defaultValue: '', description: 'The path to the metadata CSV file containing the input file paths of the samples to process. This can be an S3 path')
        string(name: 'OUTPUT_PATH', defaultValue: '', description: 'The path to the output files. This can be an S3 path. In this latter case, please specify a path which does not yet exist, otherwise Nextflow will fail to store files due to a policy defined by Dev OPS in which pods are not allowed to delete/overwrite objects in S3.')
        string(name: 'NXF_WORK', defaultValue: '', description: 'The path to Nextflow work directory. This can be an S3 path. In this latter case, please specify a path which does not yet exist, otherwise Nextflow will fail to store files due to a policy defined by Dev OPS in which pods are not allowed to delete/overwrite objects in S3.')
        string(name: 'ANALYSIS_RUN', defaultValue: '', description: 'This can be the test name')
        choice(name: 'SEQUENCING_TECHNOLOGY', choices: ['illumina', 'ont', 'unknown'], description: 'The sequencing technology. Use "unknown" to process fasta files')
        string(name: 'KIT', defaultValue: '', description: 'The version of the artic primer scheme used by the ncov-artic pipeline')
        string(name: 'CLUSTER_NAME', defaultValue: 'saas-dev.k8s.congenica.net', description: 'The Kubernetes cluster where the Congenica platform is deployed that the tests will run against.')
        string(name: 'NAMESPACE', defaultValue: 'psga', description: 'The Kubernetes namespace where the Congenica platform is deployed that the tests will run against.')

        string(name: 'PSGA_MAX_ATTEMPTS', defaultValue: '3', description: 'The maximum number of attempts resuming a failed pipeline')
        string(name: 'PSGA_SLEEP_TIME_BETWEEN_ATTEMPTS', defaultValue: '60', description: 'The sleep time between attempts')
        string(name: 'SARS_COV_2_PIPELINE_DOCKER_IMAGE', defaultValue: 'psga-pipeline', description: 'The name of the main docker image. This is temporary until we detach from Congenica ECR and Congenica Jenkins account')
        string(name: 'DOCKER_IMAGE_PREFIX', defaultValue: '144563655722.dkr.ecr.eu-west-1.amazonaws.com/congenica/dev', description: 'The docker image prefix to use')
        string(name: 'K8S_NODE', defaultValue: 'farmNode', description: 'The Kubernetes node to use as a nodeAffinity for worker jobs')
        string(name: 'K8S_PULL_POLICY', defaultValue: 'Always', description: 'The Kubernetes pull policy for docker images')
        string(name: 'K8S_STORAGE_MOUNT_PATH', defaultValue: '/data', description: 'The K8S storage mount path')
        string(name: 'K8S_QUEUE_SIZE', defaultValue: '5', description: 'The K8S job queue size')
        string(name: 'K8S_PROCESS_MAX_RETRIES', defaultValue: '3', description: 'The number of maximum retries for pipeline jobs')
        string(name: 'K8S_PROCESS_CPU_LOW', defaultValue: '1', description: 'The lowest number of cpus. The majority of jobs use this.')
        string(name: 'K8S_PROCESS_CPU_HIGH', defaultValue: '2', description: 'The highest number of cpus')
        string(name: 'K8S_PROCESS_MEMORY_VERY_LOW', defaultValue: '250', description: 'Memory setting')
        string(name: 'K8S_PROCESS_MEMORY_LOW', defaultValue: '500', description: 'Memory setting')
        string(name: 'K8S_PROCESS_MEMORY_MEDIUM', defaultValue: '1500', description: 'Memory setting')
        string(name: 'K8S_PROCESS_MEMORY_HIGH', defaultValue: '3000', description: 'Memory setting')
        string(name: 'K8S_PROCESS_MEMORY_VERY_HIGH', defaultValue: '6000', description: 'Memory setting')
        string(name: 'NXF_OPTS', defaultValue: '-Xms1g -Xmx4g', description: 'Nextflow options')

    }
    agent {
        kubernetes {
            cloud params.CLUSTER_NAME
            namespace params.NAMESPACE
            inheritFrom 'k8s-agent'
            serviceAccount "${params.NAMESPACE}-admin"
            yaml """
apiVersion: v1
kind: Pod
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: ${params.K8S_NODE}
            operator: In
            values:
            - "true"
  containers:
  - name: sars-cov-2
    image: ${params.DOCKER_IMAGE_PREFIX}/${params.SARS_COV_2_PIPELINE_DOCKER_IMAGE}:${getDockerTagFromBranch()}
    imagePullPolicy: ${params.K8S_PULL_POLICY}
    command:
    - "sleep"
    args:
    - '1d'
    resources:
      limits:
        cpu: "2"
        memory: 6Gi
      requests:
        cpu: "2"
        memory: 6Gi
    volumeMounts:
    - mountPath: ${params.K8S_STORAGE_MOUNT_PATH}
      name: psga-persistent-storage
    - mountPath: "/home/jenkins/agent"
      name: "workspace-volume"
      readOnly: false
    workingDir: "/home/jenkins/agent"
  dnsPolicy: ClusterFirst
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  volumes:
  - name: psga-persistent-storage
    persistentVolumeClaim:
      claimName: ${params.NAMESPACE}-pvc
  - emptyDir:
      medium: ""
    name: "workspace-volume"
"""
            defaultContainer 'sars-cov-2'
        }
    }
    environment {
        SARS_COV_2_PIPELINE_DOCKER_IMAGE            = "${params.SARS_COV_2_PIPELINE_DOCKER_IMAGE}"
        SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG        = "${getDockerTagFromBranch()}"
        NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG = "${getDockerTagFromBranch()}"
        NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG = "${getDockerTagFromBranch()}"
        PANGOLIN_DOCKER_IMAGE_TAG                   = "${getDockerTagFromBranch()}"

        ANALYSIS_RUN                                = "${params.ANALYSIS_RUN}"
        METADATA                                    = "${params.METADATA}"
        SEQUENCING_TECHNOLOGY                       = "${params.SEQUENCING_TECHNOLOGY}"
        KIT                                         = "${params.KIT}"
        OUTPUT_PATH                                 = "${params.OUTPUT_PATH}"

        // other configs
        K8S_NODE                                    = "${params.K8S_NODE}"
        K8S_PULL_POLICY                             = "${params.K8S_PULL_POLICY}"
        PSGA_ROOT_PATH                              = "/app"
        PSGA_INCOMPLETE_ANALYSIS_RUNS_PATH          = "/data/incomplete_analysis_runs"
        PSGA_MAX_ATTEMPTS                           = "${params.PSGA_MAX_ATTEMPTS}"
        PSGA_SLEEP_TIME_BETWEEN_ATTEMPTS            = "${params.PSGA_SLEEP_TIME_BETWEEN_ATTEMPTS}"
        DOCKER_IMAGE_PREFIX                         = "${params.DOCKER_IMAGE_PREFIX}"
        K8S_QUEUE_SIZE                              = "${params.K8S_QUEUE_SIZE}"
        K8S_SERVICE_ACCOUNT                         = "${params.NAMESPACE}-admin"
        K8S_STORAGE_CLAIM_NAME                      = "${params.NAMESPACE}-pvc"
        K8S_STORAGE_MOUNT_PATH                      = "${params.K8S_STORAGE_MOUNT_PATH}"
        K8S_PROCESS_MAX_RETRIES                     = "${params.K8S_PROCESS_MAX_RETRIES}"
        K8S_PROCESS_CPU_LOW                         = "${params.K8S_PROCESS_CPU_LOW}"
        K8S_PROCESS_CPU_HIGH                        = "${params.K8S_PROCESS_CPU_HIGH}"
        K8S_PROCESS_MEMORY_VERY_LOW                 = "${params.K8S_PROCESS_MEMORY_VERY_LOW}"
        K8S_PROCESS_MEMORY_LOW                      = "${params.K8S_PROCESS_MEMORY_LOW}"
        K8S_PROCESS_MEMORY_MEDIUM                   = "${params.K8S_PROCESS_MEMORY_MEDIUM}"
        K8S_PROCESS_MEMORY_HIGH                     = "${params.K8S_PROCESS_MEMORY_HIGH}"
        K8S_PROCESS_MEMORY_VERY_HIGH                = "${params.K8S_PROCESS_MEMORY_VERY_HIGH}"
        NXF_WORK                                    = "${params.NXF_WORK}"
        NXF_ANSI_LOG                                = "false"
        NXF_EXECUTOR                                = "k8s"
        NXF_OPTS                                    = "${params.NXF_OPTS}"

        SLACK_CHANNEL                               = "${getSlackChannel()}"
    }
    stages {
        stage('Run PSGA pipeline') {
            steps {
                script {
                    // uncomment when testing
                    //sh 'printenv'

                    // cleanup
                    // NOTE: due to OPS policy, pods cannot delete objects in S3 buckets.
                    // fileExists() does not seem to work..
                    res = sh(script: "test -d ${OUTPUT_PATH} && echo 'found' || echo 'not_found' ", returnStdout: true).trim()
                    if(res=='found'){
                        sh 'rm -rf ${OUTPUT_PATH}'
                    }

                    // run the pipeline
                    sh 'nextflow -log ${ANALYSIS_RUN}.log run ${PSGA_ROOT_PATH}/psga/main.nf --run ${ANALYSIS_RUN} --sequencing_technology ${SEQUENCING_TECHNOLOGY} --kit ${KIT} --metadata ${METADATA} --output_path ${OUTPUT_PATH} -with-trace'

                    if (params.VALIDATION_TEST) {
                        // fetch the expected output from s3
                        sh 'aws s3 cp s3://synthetic-data-dev/UKHSA/integration_tests_expected_output/sars_cov_2/${ANALYSIS_RUN}/pipeline_output.csv ${PSGA_ROOT_PATH}/jenkins/expected_results.csv'
                        // run validations
                        sh 'cd ${PSGA_ROOT_PATH}/jenkins && pytest  --expected-results-csv ${PSGA_ROOT_PATH}/jenkins/expected_results.csv --results-csv ${OUTPUT_PATH}/results.csv --output-path ${OUTPUT_PATH} --pathogen sars_cov_2 --sequencing-technology ${SEQUENCING_TECHNOLOGY} test_validation.py && cd -'
                    }

                    // copy main log, nxf work dir logs and reports to OUTPUT_PATH
                    sh 'bash ${PSGA_ROOT_PATH}/psga/finalise.sh ${ANALYSIS_RUN} ${OUTPUT_PATH}'

                }
            }
        }
    }
    post {
        success {
            script {
                if (params.VALIDATION_TEST) {
                    slackSend(
                        channel: "${env.SLACK_CHANNEL}",
                        color: 'good',
                        message: """
        :tick: <${env.BUILD_URL}|Jenkins Build #${env.BUILD_NUMBER}>
        ```${buildSlackMessage()}```
        """
                    )
                }
            }
        }
        failure {
            script {
                if (params.VALIDATION_TEST) {
                    slackSend(
                        channel: "${env.SLACK_CHANNEL}",
                        color: 'danger',
                        message: """
        :cross: <${env.BUILD_URL}|Jenkins Build #${env.BUILD_NUMBER}>
        ```${buildSlackMessage()}```
        """
                    )
                }
            }
        }
    }
}
