from typing import Dict
import os
import csv

import click
from click import ClickException
from sqlalchemy.orm import scoped_session, joinedload

from scripts.db.database import session_handler
from scripts.db.models import AnalysisRun, Sample, SampleQC


def load_ncov_sample(
    session: scoped_session, analysis_run_name: str, sample_from_csv: Dict, ncov_qc_depth_directory: str
):
    sample_name = sample_from_csv["sample_name"]
    sample_qc_depth_file_path = os.path.join(ncov_qc_depth_directory, f"{sample_name}.depth.png")
    if not os.path.isfile(sample_qc_depth_file_path):
        raise ValueError(f"File {sample_qc_depth_file_path}, required to submit sample {sample_name}, does not exist")

    sample = (
        session.query(Sample)
        .join(AnalysisRun)
        .filter(
            Sample.sample_name == sample_name,
            AnalysisRun.analysis_run_name == analysis_run_name,
        )
        .options(joinedload(Sample.sample_qc))
        .one_or_none()
    )

    if not sample:
        raise ClickException(f"Sample name: {sample_name} was not found")

    if not sample.sample_qc:
        sample.sample_qc = SampleQC()

    sample_qc = sample.sample_qc
    sample_qc.pct_n_bases = sample_from_csv["pct_N_bases"]
    sample_qc.pct_covered_bases = sample_from_csv["pct_covered_bases"]
    sample_qc.longest_no_n_run = sample_from_csv["longest_no_N_run"]
    sample_qc.num_aligned_reads = sample_from_csv["num_aligned_reads"]
    sample_qc.qc_pass = sample_from_csv["qc_pass"].lower() == "true"
    with open(sample_qc_depth_file_path, "rb") as f:
        sample_qc.qc_plot = bytearray(f.read())


@click.command()
@click.option(
    "--ncov-qc-csv-file",
    type=click.Path(exists=True, file_okay=True, readable=True),
    required=True,
    help="ncov pipeline resulting qc csv file",
)
@click.option(
    "--ncov-qc-depth-directory",
    type=click.Path(exists=True, dir_okay=True, readable=True),
    required=True,
    help="directory, containing qc depth files, following the pattern {sample_name}.depth.png",
)
@click.option("--analysis-run-name", required=True, type=str, help="The name of the analysis run")
def load_ncov_data(ncov_qc_csv_file: str, ncov_qc_depth_directory: str, analysis_run_name: str) -> None:
    """
    Submit samples QC to the database, generated by ncov pipeline
    """
    with open(ncov_qc_csv_file) as csv_file:
        sample_from_csv_reader = csv.DictReader(csv_file)
        with session_handler() as session:
            for sample_from_csv in sample_from_csv_reader:
                load_ncov_sample(session, analysis_run_name, sample_from_csv, ncov_qc_depth_directory)


if __name__ == "__main__":
    # pylint: disable=no-value-for-parameter
    load_ncov_data()
