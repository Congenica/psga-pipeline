from typing import Dict
import os
import csv

import click
from sqlalchemy.orm import scoped_session

from bahrain_covid.database import session_handler
from bahrain_covid.models import Sample, SampleQc


def submit_sample_qc_from_csv(session: scoped_session, sample_from_csv: Dict, ncov_qc_depth_directory: str,
                              pipeline_version: str):
    sample_name = sample_from_csv["sample_name"]
    sample_qc_depth_file_path = os.path.join(ncov_qc_depth_directory, f"{sample_name}.depth.png")
    if not os.path.isfile(sample_qc_depth_file_path):
        raise ValueError(
            f"File {sample_qc_depth_file_path}, required to submit sample {sample_name}, does not exist"
        )

    sample = session.query(Sample).filter_by(lab_id=sample_name).join(Sample.sample_qc).one_or_none()
    if not sample:
        sample = Sample(lab_id=sample_name)
        session.add(sample)
    if not sample.sample_qc:
        sample.sample_qc = SampleQc()

    sample_qc = sample.sample_qc
    sample_qc.pct_N_bases = sample_from_csv["pct_N_bases"]
    sample_qc.pct_covered_bases = sample_from_csv["pct_covered_bases"]
    sample_qc.longest_no_N_run = sample_from_csv["longest_no_N_run"]
    sample_qc.num_aligned_reads = sample_from_csv["num_aligned_reads"]
    sample_qc.qc_pass = sample_from_csv["qc_pass"].lower() == "true"
    with open(sample_qc_depth_file_path, "rb") as f:
        sample_qc.qc_plot = bytearray(f.read())
    sample_qc.pipeline_version = pipeline_version


@click.command()
@click.option("--ncov_qc_csv_file", type=click.Path(exists=True, file_okay=True, readable=True), required=True,
              help="ncov pipeline resulting qc csv file")
@click.option("--ncov_qc_depth_directory", type=click.Path(exists=True, dir_okay=True, readable=True), required=True,
              help="directory, containing qc depth files, following the pattern {sample_name}.depth.png")
@click.option("--pipeline_version", type=str, required=True, help="mapping pipeline version")
def submit_sample_qc(ncov_qc_csv_file: str, ncov_qc_depth_directory: str, pipeline_version: str) -> None:
    """
    Submit samples QC to the database, generated by ncov pipeline
    """
    with open(ncov_qc_csv_file) as csv_file:
        sample_from_csv_reader = csv.DictReader(csv_file)
        with session_handler() as session:
            for sample_from_csv in sample_from_csv_reader:
                submit_sample_qc_from_csv(session, sample_from_csv, ncov_qc_depth_directory, pipeline_version)


if __name__ == "__main__":
    submit_sample_qc()
