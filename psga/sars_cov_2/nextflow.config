// load the common config
includeConfig './common/common.config'

manifest {
    name = 'Congenica PSGA/SARS-CoV-2 pipeline'
    description = 'Pathogen Sequence Genome Analysis pipeline for SARS-CoV-2 pathogen'
    author = 'Congenica'
    homePage = 'https://www.congenica.com/'
    mainScript = 'main.nf'
    nextflowVersion = '>= 21.10.4'
    version = '1.0.0'
}

env {
    // docker image config
    SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG = "${SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG = "${NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
    NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG = "${NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG}"
    PANGOLIN_DOCKER_IMAGE_TAG = "${PANGOLIN_DOCKER_IMAGE_TAG}"
}

params {
    // for this workflow, the sequencing_technology can be 'unknown' | 'illumina' | 'ont'. See common.config

    // primer-scheme for ncov-artic pipeline
    // scheme_repo_url = "https://github.com/artic-network/primer-schemes.git"
    // for efficiency, the repo was checked out in our ncov2019-artic-nf docker images
    scheme_repo_url = "/artic-network/primer-schemes"
    // Directory within schemeRepoURL that contains primer schemes
    scheme_dir = "primer-schemes"
    // Scheme name
    scheme = "nCoV-2019"
    // the scheme version is set up in params.kit


    /* pipeline internal parameters */
    // read-it-and-keep reference genome fasta without the poly-A tail
    rik_ref_genome_fasta = "/usr/local/read-it-and-keep/MN908947.3.no_poly_A.fa"
}

process {

    // NOTE: processes that are not listed below, are executed in the container where the main pipeline runs
    // (executor=local by default).
    // This should be done for dummy processes (e.g. pipeline_complete) only

    // For processes running samples in parallel, ignore on repeated failure,
    // so that the failure of a sample does not affect the analysis run

    withName:check_metadata {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    }

    withName:fastqc {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
        errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
    }

    if ( params.sequencing_technology == "illumina" ) {
        withName:bam_to_fastq {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-illumina:${env.NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
            errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }

        withName:contamination_removal_illumina {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
            errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }

        // use more memory as this process runs a nextflow pipeline (Java)
        withName:ncov2019_artic_nf_pipeline_illumina {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-illumina:${env.NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
            // trimgalore requires 2 CPUS
            cpus = "${env.K8S_PROCESS_CPU_HIGH}"
            // if ncov sample dies, carry on with the other ncov samples
            errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }
    } else if ( params.sequencing_technology == "ont" ) {
        withName:contamination_removal_ont {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
            errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }

        // use more memory as this process runs a nextflow pipeline (Java)
        withName:ncov2019_artic_nf_pipeline_medaka {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-nanopore:${env.NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
            // if the computation for 1 sample dies, do not interrupt the computation for the other samples
            errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }
    }

    withName:reheader_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
        memory = { "${env.K8S_PROCESS_MEMORY_MEDIUM}" as int * 1.MB * task.attempt }
        errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
    }

    withName:store_reheadered_qc_passed_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    }

    withName:store_reheadered_qc_failed_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    }

    withName:pangolin_pipeline {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/pangolin:${env.PANGOLIN_DOCKER_IMAGE_TAG}"
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
        // if the computation for 1 sample dies, do not interrupt the computation for the other samples
        errorStrategy = { (task.exitStatus != 0 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
    }

    withName:submit_ncov_results {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    }
    withName:submit_pangolin_results {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    }
    withName:submit_pipeline_output_csv {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga-pipeline:${env.SARS_COV_2_PIPELINE_DOCKER_IMAGE_TAG}"
    }

}
