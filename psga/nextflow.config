manifest {
    name = 'PSGA pipeline'
    description = 'Pathogen SequencinG Analysis pipeline'
    nextflowVersion = '>= 21.10.4'
    version = '1.0.0'
}

env {
    DB_HOST = "${DB_HOST}"
    DB_PORT = "${DB_PORT}"
    DB_NAME = "${DB_NAME}"
    DB_USER = "${DB_USER}"
    DB_PASSWORD = "${DB_PASSWORD}"
    PSGA_ROOT_PATH = "${PSGA_ROOT_PATH}"
    PSGA_OUTPUT_PATH = "${PSGA_OUTPUT_PATH}"
    PSGA_INCOMPLETE_ANALYSIS_RUNS_PATH = "${PSGA_INCOMPLETE_ANALYSIS_RUNS_PATH}"
    PSGA_CLEANUP_WORKDIR = "${PSGA_CLEANUP_WORKDIR}"

    // docker image config
    DOCKER_IMAGE_PREFIX = "${DOCKER_IMAGE_PREFIX}"
    PSGA_DOCKER_IMAGE_TAG = "${PSGA_DOCKER_IMAGE_TAG}"

    // k8s config
    K8S_PULL_POLICY = "${K8S_PULL_POLICY}"
    K8S_SERVICE_ACCOUNT = "${K8S_SERVICE_ACCOUNT}"
    K8S_QUEUE_SIZE = "${K8S_QUEUE_SIZE}"
    K8S_STORAGE_CLAIM_NAME = "${K8S_STORAGE_CLAIM_NAME}"
    K8S_STORAGE_MOUNT_PATH = "${K8S_STORAGE_MOUNT_PATH}"
    K8S_PROCESS_MAX_RETRIES = "${K8S_PROCESS_MAX_RETRIES}"
    K8S_PROCESS_CPU_LOW = "${K8S_PROCESS_CPU_LOW}"
    K8S_PROCESS_CPU_HIGH = "${K8S_PROCESS_CPU_HIGH}"
    K8S_PROCESS_MEMORY_VERY_LOW = "${K8S_PROCESS_MEMORY_VERY_LOW}"
    K8S_PROCESS_MEMORY_LOW = "${K8S_PROCESS_MEMORY_LOW}"
    K8S_PROCESS_MEMORY_MEDIUM = "${K8S_PROCESS_MEMORY_MEDIUM}"
    K8S_PROCESS_MEMORY_HIGH = "${K8S_PROCESS_MEMORY_HIGH}"
    K8S_PROCESS_MEMORY_VERY_HIGH = "${K8S_PROCESS_MEMORY_VERY_HIGH}"

    // nextflow internal env vars
    NXF_WORK = "${NXF_WORK}"
    NXF_EXECUTOR = "${NXF_EXECUTOR}"
    NXF_ANSI_LOG = "${NXF_ANSI_LOG}"
    NXF_OPTS = "${NXF_OPTS}"
}

params {
    // pathogen name. Configure this in the pathogen specific config
    pathogen = ""

    // analysis run name
    run = ""

    // path to the metadata CSV file
    metadata = ""
    load_missing_samples = false

    /* Optional parameters */
    help = false
    print_config = false

    /* GENBANK */
    // parameter for GenBank submission template, which is generated
    // at website https://submit.ncbi.nlm.nih.gov/genbank/template/submission/
    // provided default file is an example one. Make sure to generate your own
    // template file
    genbank_submission_template = "${PSGA_ROOT_PATH}/data/GenBank/template.example.sbt"
    // comment to be added to each submission to GenBank
    genbank_submission_comment = "United Kingdom pathogen genome submission"
    // User account name that will be provided when the submission account is established.
    // Example: "congenica"
    genbank_submitter_name = ""
    // Center/account abbreviation provided during account creation in MyNCBI.
    // Example: "congenica"
    genbank_submitter_account_namespace = ""
    // Static value to add to every submission ID for GenBank
    genbank_submission_id_suffix = "ukhsa-sars-cov-2"
    // GenBank remote storage information with credentials
    genbank_storage_remote_url = "ftp-private.ncbi.nlm.nih.gov"
    genbank_storage_remote_username = ""
    genbank_storage_remote_password = ""
    // Set to "Test" for making test submissions for GenBank submission portal
    // Set to "Production" to actually submit sequences to GenBank for further analysis
    genbank_storage_remote_directory = "Test"
}

executor {
    name = 'k8s'
    queueSize = "${env.K8S_QUEUE_SIZE}"
    submitRateLimit = '10 sec'
}

k8s {
   pullPolicy = "${env.K8S_PULL_POLICY}"
   serviceAccount = "${env.K8S_SERVICE_ACCOUNT}"
   storageClaimName = "${env.K8S_STORAGE_CLAIM_NAME}"
   storageMountPath = "${env.K8S_STORAGE_MOUNT_PATH}"
   storageSubPath = ''
}

process {
    // cleanup the work directory automatically. This is 'true' or 'false'.
    cleanup = "${env.PSGA_CLEANUP_WORKDIR}"

    // default directives. These can be fine-tuned per process
    // use the local executor by default, so that the filtering-processes (which are only used for organising files) and any
    // dummy processes (e.g. pipeline complete) are executed in the same container where the main pipeline runs.
    executor = 'local'
    cpus = "${env.K8S_PROCESS_CPU_LOW}"
    memory = { "${env.K8S_PROCESS_MEMORY_LOW}" as int * 1.MB * task.attempt }
    maxRetries = "${env.K8S_PROCESS_MAX_RETRIES}"
    errorStrategy = { (task.exitStatus in 137..143 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'terminate' }

    withName:create_genbank_submission_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:submit_genbank_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:mark_samples_as_submitted_to_genbank {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
}
