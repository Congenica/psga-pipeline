manifest {
    name = 'PSGA pipeline'
    description = 'Pathogen SequencinG Analysis pipeline'
    nextflowVersion = '>= 21.10.4'
    version = '1.0.0'
}

includeConfig 'executor.config'
includeConfig 'ncov-custom.config'

env {
    DB_HOST = "${DB_HOST}"
    DB_PORT = "${DB_PORT}"
    DB_NAME = "${DB_NAME}"
    DB_USER = "${DB_USER}"
    DB_PASSWORD = "${DB_PASSWORD}"
    PSGA_ROOT_PATH = "${PSGA_ROOT_PATH}"
    PSGA_INPUT_PATH = "${PSGA_INPUT_PATH}"
    PSGA_OUTPUT_PATH = "${PSGA_OUTPUT_PATH}"
}

params {
    // An internal parameter, required by the methods makeFastqSearchPath, makeBamSearchPath and makeNanoporeSearchPath
    directory = env.PSGA_INPUT_PATH

    /* GENBANK */
    // parameter for GenBank submission template, which is generated
    // at website https://submit.ncbi.nlm.nih.gov/genbank/template/submission/
    // provided default file is an example one. Make sure to generate your own
    // template file
    genbank_submission_template = "${PSGA_ROOT_PATH}/data/GenBank/template.example.sbt"
    // comment to be added to each submission to GenBank
    genbank_submission_comment = "United Kingdom pathogen genome submission"
    // User account name that will be provided when the submission account is established.
    // Example: "congenica"
    genbank_submitter_name = ""
    // Center/account abbreviation provided during account creation in MyNCBI.
    // Example: "congenica"
    genbank_submitter_account_namespace = ""
    // Static value to add to every submission ID for GenBank
    genbank_submission_id_suffix = "ukhsa-sars-cov-2"
    // GenBank remote storage information with credentials
    genbank_storage_remote_url = "ftp-private.ncbi.nlm.nih.gov"
    genbank_storage_remote_username = ""
    genbank_storage_remote_password = ""
    // Set to "Test" for making test submissions for GenBank submission portal
    // Set to "Production" to actually submit sequences to GenBank for further analysis
    genbank_storage_remote_directory = "Test"

    /* LOAD METADATA */
    metadata_file_name = "metadata.tsv"

    /* PIPELINE MAIN INPUT PARAMETERS */
    // primer-schema for ncov-artic pipeline
    // scheme_repo_url = "https://github.com/artic-network/primer-schemes.git"
    // for efficiency, the repo was checked out in our ncov2019-artic-nf docker images
    scheme_repo_url = "/artic-network/primer-schemes"
    // Directory within schemeRepoURL that contains primer schemes
    scheme_dir = "primer-schemes"
    // Scheme name
    scheme = "nCoV-2019"
    // Scheme version
    scheme_version = "V3"

    // choices: 'illumina_artic' | 'medaka_artic' (nanopore)
    workflow = "illumina_artic"
    // choices: fastq | bam
    filetype = "fastq"
    // the name for this analysis
    run = "test_run"

    /* Optional parameters */
    help = ""
    print_config = ""
}

process {
    // default directives. These can be fine-tuned per process
    // use the local executor by default, so that the filtering-processes (which are only used for organising files) and any
    // dummy processes (e.g. pipeline complete) are executed in the same container where the main pipeline runs.
    executor = 'local'
    cpus = "${env.K8S_PROCESS_CPU_LOW}"
    memory = { "${env.K8S_PROCESS_MEMORY_LOW}" as int * 1.MB * task.attempt }
    maxRetries = "${env.K8S_PROCESS_MAX_RETRIES}"
    errorStrategy = { (task.exitStatus in 137..140 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'terminate' }

    withName:load_metadata {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    if ( params.workflow == "illumina_artic" ) {
        if ( params.filetype == "bam" ) {
            withName:bam_to_fastq {
                executor = 'k8s'
                container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-illumina:${env.NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
                memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
            }
        }
        // use more memory as this process runs a nextflow pipeline (Java)
        withName:ncov2019_artic_nf_pipeline_illumina {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-illumina:${env.NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
            // trimgalore requires 2 CPUS
            cpus = "${env.K8S_PROCESS_CPU_HIGH}"
            // if ncov sample dies, carry on with the other ncov samples
            errorStrategy = { (task.exitStatus in 137..140 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }
    }

    if ( params.workflow == "medaka_artic" ) {
        // use more memory as this process runs a nextflow pipeline (Java)
        withName:ncov2019_artic_nf_pipeline_medaka {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-nanopore:${env.NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
            // if the computation for 1 sample dies, do not interrupt the computation for the other samples
            errorStrategy = { (task.exitStatus in 137..140 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }
    }
    withName:merge_ncov_qc_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:load_ncov_data_to_db {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    withName:reheader_genome_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
        memory = { "${env.K8S_PROCESS_MEMORY_MEDIUM}" as int * 1.MB * task.attempt }
    }
    withName:pangolin_pipeline {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/pangolin:${env.PANGOLIN_DOCKER_IMAGE_TAG}"
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
        // if the computation for 1 sample dies, do not interrupt the computation for the other samples
        errorStrategy = { (task.exitStatus in 137..140 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
    }
    withName:merge_pangolin_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:load_pangolin_data_to_db {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    withName:create_genbank_submission_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:submit_genbank_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:mark_samples_as_submitted_to_genbank {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
}
