// load the main config
includeConfig 'nextflow.config'

env {
    // docker image config
    NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG = "${NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
    NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG = "${NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG}"
    PANGOLIN_DOCKER_IMAGE_TAG = "${PANGOLIN_DOCKER_IMAGE_TAG}"
}

params {
    // mandatory
    pathogen = "sars_cov_2"

    // primer-schema for ncov-artic pipeline
    // scheme_repo_url = "https://github.com/artic-network/primer-schemes.git"
    // for efficiency, the repo was checked out in our ncov2019-artic-nf docker images
    scheme_repo_url = "/artic-network/primer-schemes"
    // Directory within schemeRepoURL that contains primer schemes
    scheme_dir = "primer-schemes"
    // Scheme name
    scheme = "nCoV-2019"
    // Scheme version
    scheme_version = "V3"

    // choices: 'no_ncov' | 'illumina_artic' | 'medaka_artic' (nanopore)
    ncov_workflow = ""
    // choices: fasta | fastq | bam
    filetype = ""
}

process {
    // cleanup the work directory automatically. This is 'true' or 'false'.
    cleanup = "${env.PSGA_CLEANUP_WORKDIR}"

    // default directives. These can be fine-tuned per process
    // use the local executor by default, so that the filtering-processes (which are only used for organising files) and any
    // dummy processes (e.g. pipeline complete) are executed in the same container where the main pipeline runs.
    executor = 'local'
    cpus = "${env.K8S_PROCESS_CPU_LOW}"
    memory = { "${env.K8S_PROCESS_MEMORY_LOW}" as int * 1.MB * task.attempt }
    maxRetries = "${env.K8S_PROCESS_MAX_RETRIES}"
    errorStrategy = { (task.exitStatus in 137..143 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'terminate' }

    withName:check_metadata {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    withName:fastqc {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    if ( params.ncov_workflow == "illumina_artic" ) {
        if ( params.filetype == "bam" ) {
            withName:bam_to_fastq {
                executor = 'k8s'
                container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-illumina:${env.NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
                memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
            }
        }
        // use more memory as this process runs a nextflow pipeline (Java)
        withName:ncov2019_artic_nf_pipeline_illumina {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-illumina:${env.NCOV2019_ARTIC_NF_ILLUMINA_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
            // trimgalore requires 2 CPUS
            cpus = "${env.K8S_PROCESS_CPU_HIGH}"
            // if ncov sample dies, carry on with the other ncov samples
            errorStrategy = { (task.exitStatus in 137..143 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }
    } else if ( params.ncov_workflow == "medaka_artic" ) {
        // use more memory as this process runs a nextflow pipeline (Java)
        withName:ncov2019_artic_nf_pipeline_medaka {
            executor = 'k8s'
            container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019-artic-nf-nanopore:${env.NCOV2019_ARTIC_NF_NANOPORE_DOCKER_IMAGE_TAG}"
            memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
            // if the computation for 1 sample dies, do not interrupt the computation for the other samples
            errorStrategy = { (task.exitStatus in 137..143 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
        }
    }

    withName:reheader_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
        memory = { "${env.K8S_PROCESS_MEMORY_MEDIUM}" as int * 1.MB * task.attempt }
    }

    withName:store_reheadered_qc_passed_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    withName:store_reheadered_qc_failed_fasta {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

    withName:pangolin_pipeline {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/pangolin:${env.PANGOLIN_DOCKER_IMAGE_TAG}"
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
        // if the computation for 1 sample dies, do not interrupt the computation for the other samples
        errorStrategy = { (task.exitStatus in 137..143 && task.attempt <= "${env.K8S_PROCESS_MAX_RETRIES}" as int) ? 'retry' : 'ignore' }
    }

    withName:merge_ncov2019_artic_qc_sample_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:merge_pangolin_sample_files {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:submit_ncov_results {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }
    withName:submit_pangolin_results {
        executor = 'k8s'
        container = "${env.DOCKER_IMAGE_PREFIX}/psga:${env.PSGA_DOCKER_IMAGE_TAG}"
    }

}
