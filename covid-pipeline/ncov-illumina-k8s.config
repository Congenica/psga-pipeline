// this config tells ncov how to run the illumina workflow
// and it is used by the ncov2019-artic-nf-illumina pod that spins up ncov nextflow pipeline sub pods

includeConfig 'executor.config'

process {
    // default directives. These can be fine-tuned per process
    executor = 'local'
    cpus = "${env.K8S_PROCESS_CPU_LOW}"
    memory = { "${env.K8S_PROCESS_MEMORY_LOW}" as int * 1.MB * task.attempt }

    withName:readTrimming {
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
        // trimgalore requires 2 CPUS
        cpus = "${env.K8S_PROCESS_CPU_HIGH}"
    }
    withName:indexReference {
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
    }
    withName:readMapping {
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
    }
    withName:trimPrimerSequences {
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
    }
    withName:makeConsensus {
        memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
    }
    withName:callVariants {
        memory = { "${env.K8S_PROCESS_MEMORY_VERY_HIGH}" as int * 1.MB * task.attempt }
    }
    withName:makeQCCSV {
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
    }
    withName:collateSamples {
        memory = { "${env.K8S_PROCESS_MEMORY_HIGH}" as int * 1.MB * task.attempt }
    }
}
