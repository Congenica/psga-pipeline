// this config tells ncov how to run the illumina workflow

env {
    // docker image config
    DOCKER_IMAGE_PREFIX = "${DOCKER_IMAGE_PREFIX}"
    VERSION = "${VERSION}"

    // copy over these nextflow env vars
    NXF_WORK = "${NXF_WORK}"
    NXF_EXECUTOR = "${NXF_EXECUTOR}"
    NXF_ANSI_LOG = "${NXF_ANSI_LOG}"
}

process {
    executor = 'k8s'

    withName:readTrimming {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:articDownloadScheme {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:indexReference {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:writeQCSummaryCSV {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:readMapping {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:trimPrimerSequences {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:makeConsensus {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:callVariants {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:makeQCCSV {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
    withName:collateSamples {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_illumina:${env.VERSION}"
    }
}

k8s {
   storageClaimName = 'covid-pipeline-pvc'
   storageMountPath = '/data'
   storageSubPath = ''
}
