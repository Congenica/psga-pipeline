params {
    illuminaPrefixes = false
    // Example of illumina sample: 12704506_S01_L001_R1_001.fq.gz
    // See: https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/NamingConvention_FASTQ-files-swBS.htm
    illuminaSuffixes = ['*_S{*}_L{*}_R{1,2}_001']
    fastq_exts = ['.fastq.gz', '.fq.gz']
}

env {
    // version for our docker image
    VERSION = "${VERSION}"

    // copy over these nextflow env vares
    NXF_WORK = "${NXF_WORK}"
    NXF_EXECUTOR = "${NXF_EXECUTOR}"
    NXF_ANSI_LOG = "${NXF_ANSI_LOG}"
}

process {
    executor = 'k8s'

    withName:readTrimming {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:articDownloadScheme {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:indexReference {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:writeQCSummaryCSV {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:readMapping {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:trimPrimerSequences {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:makeConsensus {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:callVariants {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:makeQCCSV {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
    withName:collateSamples {
        container = "ncov2019_artic_nf:${env.VERSION}"
    }
}

k8s {
   storageClaimName = 'covid-pipeline-pvc'
   storageMountPath = '/data'
   storageSubPath = ''
}
