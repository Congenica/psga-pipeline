// this config tells ncov how to run the nanopore workflow
// and it is used by the ncov2019_artic_nf_nanopore pod that spins up ncov nextflow pipeline sub pods

env {
    // docker image config
    DOCKER_IMAGE_PREFIX = "${DOCKER_IMAGE_PREFIX}"
    VERSION = "${VERSION}"

    K8S_PULL_POLICY = "${K8S_PULL_POLICY}"
    K8S_SERVICE_ACCOUNT = "${K8S_SERVICE_ACCOUNT}"
    K8S_QUEUE_SIZE = "${K8S_QUEUE_SIZE}"
    K8S_STORAGE_CLAIM_NAME = "${K8S_STORAGE_CLAIM_NAME}"
    K8S_STORAGE_MOUNT_PATH = "${K8S_STORAGE_MOUNT_PATH}"

    // copy over these nextflow env vars
    NXF_WORK = "${NXF_WORK}"
    NXF_EXECUTOR = "${NXF_EXECUTOR}"
    NXF_ANSI_LOG = "${NXF_ANSI_LOG}"
}

executor {
    name = 'k8s'
    queueSize = ${env.K8S_QUEUE_SIZE}
    submitRateLimit = '10 sec'
}

k8s {
   pullPolicy = "${env.K8S_PULL_POLICY}"
   serviceAccount = "${env.K8S_SERVICE_ACCOUNT}"
   storageClaimName = "${env.K8S_STORAGE_CLAIM_NAME}"
   storageMountPath = "${env.K8S_STORAGE_MOUNT_PATH}"
   storageSubPath = ''
}

process {
    executor = 'k8s'

    withName:writeQCSummaryCSV {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
    withName:articDownloadScheme {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
    withName:articGuppyPlex {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
    withName:articMinIONMedaka {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
    withName:articRemoveUnmappedReads {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
    withName:makeQCCSV {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
    withName:collateSamples {
        container = "${env.DOCKER_IMAGE_PREFIX}/ncov2019_artic_nf_nanopore:${env.VERSION}"
    }
}
