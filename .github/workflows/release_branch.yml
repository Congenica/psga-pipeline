name: Release branch
on:
  push:
    branches:
      - release/*

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  vars:
    runs-on: ubuntu-22.04
    environment: prod
    outputs:
      CICD_OIDC_ROLE: ${{ vars.CICD_OIDC_ROLE }}
      GH_RUNNER_SUBNET_ID: ${{ vars.GH_RUNNER_SUBNET_ID }}
      GH_RUNNER_SECURITY_GROUP_ID: ${{ vars.GH_RUNNER_SECURITY_GROUP_ID }}
      GH_RUNNER_IAM_ROLE_NAME: ${{ vars.GH_RUNNER_IAM_ROLE_NAME }}
    steps:
      - run: echo "Exposing env vars"

  publish_configs:
    name: Publish configs
    needs:
      - build_release_image
      - vars
    uses: ./.github/workflows/publish_configs.yaml
    secrets:
      CICD_OIDC_ROLE: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
      S3_BUCKET_PATH: ${{ secrets.S3_BUCKET_PATH_PROD }}
      GH_PSGA_SYSTEM_PAT: ${{ secrets.GH_PSGA_SYSTEM_PAT }}
    with:
      actions_env: prod
      release_enabled: true

  start-runner:
    uses: Congenica/psga-reusable-workflows/.github/workflows/ec2-runner-start.yaml@main
    needs: vars
    secrets:
      role-to-assume: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
      github-token: ${{ secrets.GH_PSGA_SYSTEM_PAT }}
    with:
      aws-region: ${{ vars.AWS_REGION }}
      ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
      subnet-id: ${{  needs.vars.outputs.GH_RUNNER_SUBNET_ID }}
      security-group-id: ${{  needs.vars.outputs.GH_RUNNER_SECURITY_GROUP_ID }}
      iam-role-name: ${{  needs.vars.outputs.GH_RUNNER_IAM_ROLE_NAME }}
      env_type: prod

  build_release_image:
    name: Build and push the release image
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }}
    environment: prod
    strategy:
      matrix:
        image:
          - sars-cov-2-pipeline
          - ncov2019-artic-nf-nanopore
          - ncov2019-artic-nf-illumina
          - pangolin
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up env
        run: |
          RELEASE_VERSION=${GITHUB_REF/refs\/heads\/release\//}
          echo "Release version: $RELEASE_VERSION, Github ref: ${GITHUB_REF}"
          ECR_PATH_PROD=${{ secrets.ECR_PATH_PROD }}
          ECR_PATH_DEV=${{ secrets.ECR_PATH_DEV }}
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "DEV_IMAGE_NAME=$ECR_PATH_DEV/${{ matrix.image }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "DEV_RELEASE_NAME=$ECR_PATH_DEV/${{ matrix.image }}:$RELEASE_VERSION" >> $GITHUB_ENV
          echo "PROD_RELEASE_NAME=$ECR_PATH_PROD/${{ matrix.image }}:$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Configure dev AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
          role-session-name: cicd-dev-role-session
          mask-aws-account-id: false

      - name: Login to dev Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull the docker image from dev, build the release image and push to dev
        run: |
          docker pull $DEV_IMAGE_NAME
          cat << EOF > full-version.properties
          github.base_ref = "${{ github.base_ref }}"
          github.ref = "${{ github.ref }}"
          github.ref_name = "${{ github.ref_name }}"
          github.repositoryUrl = "${{ github.repositoryUrl }}"
          github.run_id = "${{ github.run_id }}"
          github.run_number = "${{ github.run_number }}"
          github.run_attempt = "${{ github.run_attempt }}"
          github.sha = "${{ github.sha }}"
          EOF
          echo "$RELEASE_VERSION" > version.properties
          docker build --build-arg BASE_IMAGE=$DEV_IMAGE_NAME \
            -t $DEV_RELEASE_NAME \
            -t $PROD_RELEASE_NAME \
            -f docker/Dockerfile-release .
          docker push $DEV_RELEASE_NAME

      - name: Configure prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
          role-session-name: cicd-prod-role-session
          mask-aws-account-id: false

      - name: Login to prod Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the release image to prod
        run: docker push $PROD_RELEASE_NAME

  stop-runner:
    if: ${{ always() }} # required to stop the runner even if previous jobs failed or are cancelled
    needs:
      - start-runner # required to get output from the start-runner job
      - build_release_image # required to wait when the main job is done
    uses: Congenica/psga-reusable-workflows/.github/workflows/ec2-runner-stop.yaml@main
    secrets:
      role-to-assume: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
      github-token: ${{ secrets.GH_PSGA_SYSTEM_PAT }}
    with:
      aws-region: ${{ vars.AWS_REGION }}
      label: ${{ needs.start-runner.outputs.label }}
      ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
