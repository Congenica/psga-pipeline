name: Build, test and push
on:
  push:
    branches-ignore:
      - "release/**"
jobs:
  pipeline_setup:
    name: Setup the workflow variables
    runs-on: ubuntu-22.04
    outputs:
      push_enabled: ${{ steps.setup.outputs.push_enabled }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Override vars on branches
        id: setup
        run: |
          if [[ "${{ github.ref }}" == 'refs/heads/main' || "${{ github.ref }}" == 'refs/heads/dev' ]]; then
            echo "push_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "push_enabled=true" >> $GITHUB_OUTPUT
          fi
  synthetic-pipeline:
    needs:
      - check_and_test
      - pipeline_setup
    strategy:
      matrix:
        image:
          - name: synthetic-pipeline
            dockerfile: Dockerfile.psga-pipeline
            pathogen: synthetic
          - name: sars-cov-2-pipeline
            dockerfile: Dockerfile.psga-pipeline
            pathogen: sars_cov_2
    uses: ./.github/workflows/build_image.yaml
    secrets: inherit
    with:
      name: ${{ matrix.image.name }}
      dockerfile: ${{ matrix.image.dockerfile }}
      pathogen: ${{ matrix.image.pathogen }}
      push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # synthetic-pipeline:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: synthetic-pipeline
  #     dockerfile: Dockerfile.psga-pipeline
  #     pathogen: synthetic
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # sars-cov-2-pipeline:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: sars-cov-2-pipeline
  #     dockerfile: Dockerfile.psga-pipeline
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # fastqc:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: fastqc
  #     dockerfile: Dockerfile.fastqc
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # read_it_and_keep:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: read-it-and-keep
  #     dockerfile: Dockerfile.read-it-and-keep
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # primer-autodetection:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: primer-autodetection
  #     dockerfile: Dockerfile.primer-autodetection
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # pangolin:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: pangolin
  #     dockerfile: Dockerfile.pangolin
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # ncov2019-artic-nf-nanopore:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: ncov2019-artic-nf-nanopore
  #     dockerfile: Dockerfile.ncov2019-artic-nf-nanopore
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # ncov2019-artic-nf-illumina:
  #   needs:
  #     - check_and_test
  #     - pipeline_setup
  #   uses: ./.github/workflows/build_image.yaml
  #   secrets: inherit
  #   with:
  #     name: ncov2019-artic-nf-illumina
  #     dockerfile: Dockerfile.ncov2019-artic-nf-illumina
  #     pathogen: sars_cov_2
  #     push_enabled: ${{ needs.pipeline_setup.outputs.push_enabled }}
  # publish_configs_dev:
  #   if: github.ref == 'refs/heads/dev'
  #   needs:
  #     - sars-cov-2-pipeline
  #     - synthetic-pipeline
  #   uses: ./.github/workflows/publish_configs.yaml
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     S3_BUCKET_PATH: ${{ secrets.S3_BUCKET_PATH_DEV }}
  #   with:
  #     versions: "${{ github.sha }},dev_latest"
  # publish_configs_main:
  #   if: github.ref == 'refs/heads/main'
  #   needs:
  #     - sars-cov-2-pipeline
  #     - synthetic-pipeline
  #   uses: ./.github/workflows/publish_configs.yaml
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     S3_BUCKET_PATH: ${{ secrets.S3_BUCKET_PATH_DEV }}
  #   with:
  #     versions: "${{ github.sha }},main_latest"
  check_and_test:
    name: Install dependencies and run tests
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: Pre-commit checks
        run: |
          pip install pre-commit==2.17.0
          pre-commit run --all-files
      - name: Install dependencies and run tests
        run: |
          poetry install
          poetry run pytest tests/
