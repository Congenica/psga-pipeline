name: Build docker image
on:
  workflow_call:
    inputs:
      name:
        type: string
        required: true
      dockerfile:
        type: string
        required: false
        default: ""
      pathogen:
        type: string
        required: false
        default: ""

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  vars:
    runs-on: ubuntu-22.04
    environment: nonprod
    outputs:
      CICD_OIDC_ROLE: ${{ vars.CICD_OIDC_ROLE }}
      GH_RUNNER_SUBNET_ID: ${{ vars.GH_RUNNER_SUBNET_ID }}
      GH_RUNNER_SECURITY_GROUP_ID: ${{ vars.GH_RUNNER_SECURITY_GROUP_ID }}
      GH_RUNNER_IAM_ROLE_NAME: ${{ vars.GH_RUNNER_IAM_ROLE_NAME }}
    steps:
      - run: echo "Exposing env vars"

  start-runner:
    uses: Congenica/psga-reusable-workflows/.github/workflows/ec2-runner-start.yaml@main
    needs: vars
    secrets:
      role-to-assume: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
      github-token: ${{ secrets.GH_PSGA_SYSTEM_PAT }}
    with:
      aws-region: ${{ vars.AWS_REGION }}
      ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
      subnet-id: ${{  needs.vars.outputs.GH_RUNNER_SUBNET_ID }}
      security-group-id: ${{  needs.vars.outputs.GH_RUNNER_SECURITY_GROUP_ID }}
      iam-role-name: ${{  needs.vars.outputs.GH_RUNNER_IAM_ROLE_NAME }}
      env_type: nonprod

  build:
    name: Build and push
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CICD_OIDC_ROLE }}
          role-session-name: cicd-role-session
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build (and push) the image
        run: |
          set -e
          BRANCH_NAME=${GITHUB_REF/refs\/heads\//}
          IMAGE_NAME="${{ inputs.name }}:${{ github.sha }}"
          ECR_IMAGE_NAME="${{ secrets.ECR_PATH_DEV }}/${IMAGE_NAME}"
          ECR_BRANCH_LATEST_NAME="${{ secrets.ECR_PATH_DEV }}/${{ inputs.name }}:${BRANCH_NAME}_latest"
          DOCKERFILE="docker/Dockerfile.${{ inputs.name }}"
          if [[ ! -z "${{ inputs.dockerfile }}" ]]; then
            DOCKERFILE="docker/${{ inputs.dockerfile }}"
          fi
          git submodule update --init --recursive
          docker build --build-arg pathogen=${{ inputs.pathogen }} -t $ECR_IMAGE_NAME -t $ECR_BRANCH_LATEST_NAME -f $DOCKERFILE .
          docker push $ECR_IMAGE_NAME
          docker push $ECR_BRANCH_LATEST_NAME

  stop-runner:
    if: ${{ always() }} # required to stop the runner even if previous jobs failed or are cancelled
    needs:
      - start-runner # required to get output from the start-runner job
      - build # required to wait when the main job is done
    uses: Congenica/psga-reusable-workflows/.github/workflows/ec2-runner-stop.yaml@main
    secrets:
      role-to-assume: ${{ needs.vars.outputs.CICD_OIDC_ROLE }}
      github-token: ${{ secrets.GH_PSGA_SYSTEM_PAT }}
    with:
      aws-region: ${{ vars.AWS_REGION }}
      label: ${{ needs.start-runner.outputs.label }}
      ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
