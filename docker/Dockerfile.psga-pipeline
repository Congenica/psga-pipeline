FROM condaforge/mambaforge:23.3.1-1 AS condabuild

ARG pathogen
COPY docker/${pathogen}/psga.yml /environment.yml

RUN mamba env create -f /environment.yml -n custom_env \
  && conda clean --all -y

# multi stage to reduce docker image size and avoid conda env activation
FROM debian:bookworm-slim

COPY --from=condabuild /opt/conda/envs/custom_env /opt/conda/envs/custom_env
ENV PATH=/opt/conda/envs/custom_env/bin:$PATH

# # pin the versions of pip and poetry
# ENV PIP_VERSION=22.2 \
#   POETRY_VERSION=1.7

ARG pathogen
COPY ./pyproject.toml ./poetry.lock ./app/

WORKDIR /app

# NOTES:
# 1. must install the nf-amazon version mentioned in nextflow release notes
#    (e.g. see: https://github.com/nextflow-io/nextflow/releases/tag/v22.10.0 bumps nf-amazon@1.11.0)
#    Without version, nextflow plugin install will install the latest version for this plugin
#    and the required plugin will be re-installed at runtime.
# 2. make poetry install everything system wide, no need for a virtualenv in docker
#    install setuptools here to avoid the warning / error:
#    ModuleNotFoundError: No module named '_distutils_hack'
#    This error does not disappear if this is installed via conda
RUN nextflow plugin install nf-amazon@1.11.0 \
  && pip install setuptools==63.1.0 \
  && pip install --progress-bar=off --no-cache-dir --upgrade pip \
  && pip install --progress-bar=off --no-cache-dir poetry \
  # the following uninstall & install commands are a fix for urllib3 being installed by something else
  # in a version that breaks poetry installation, e.g. see https://github.com/python-poetry/poetry/issues/7878
  && pip uninstall -y urllib3 \
  && pip install urllib3==1.26.14 \
  && poetry config virtualenvs.create false \
  && poetry install --no-interaction --no-ansi --no-dev

WORKDIR /

COPY ./psga/common /app/psga/common
COPY ./psga/${pathogen} ./psga/*.sh ./psga/main.nf /app/psga/
COPY ./scripts/common /app/scripts/common
COPY ./scripts/util /app/scripts/util
COPY ./scripts/validation /app/scripts/validation
COPY ./scripts/${pathogen} /app/scripts/${pathogen}

# scripts for running the validation following integration tests execution
COPY ./integration_tests/*.py ./app/integration_tests/
COPY ./integration_tests/expected_data/${pathogen} ./app/integration_tests/expected_data/${pathogen}

# FASTQC
COPY data/${pathogen}/fastqc/* /

# PRIMER AUTODETECTION
COPY scripts/common /app/scripts/common
COPY data/${pathogen}/primer_schemes /primer_schemes

# READ IT AND KEEP
COPY data/${pathogen}/read-it-and-keep/* /
COPY scripts/common /app/scripts/common

WORKDIR /app/psga

# # generic construct if scripts must be executed at this stage (e.g. for generating default files)
RUN if [ -f /app/scripts/${pathogen}/Makefile ]; then cd /app/scripts/${pathogen} && make; fi;
